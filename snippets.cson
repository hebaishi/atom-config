# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson
'.source.c':
    'Code Trace':
        'prefix': 'trace'
        'body': '  printf("Reached %s:%d\\n", __FILE__, __LINE__);'
'.source.cpp':
    'C++ debug message':
        'prefix': 'debug'
        'body': 'std::cerr << \"$1 = \" << $1 << std::endl;'
    'Clock surround':
        'prefix': 'clock'
        'body': """
        t1 = high_resolution_clock::now();
        t2 = high_resolution_clock::now();
        time_span = duration_cast < duration<double> > (t2 - t1);
        std::cout << "$1: " << time_span.count() << "s" << std::endl;
        """
    'Clock init':
        'prefix': 'clockinit'
        'body': """
        using namespace std::chrono;
        high_resolution_clock::time_point t1, t2;
        duration <double> time_span;
        """
    'Code Trace':
        'prefix': 'trace'
        'body': 'std::cerr << \"Reached \" << __FILE__  << ":" << __LINE__ << std::endl;'
    'String tokenize':
        'prefix': 'tokenize'
        'body': """
        void Tokenize(const string &s, vector <string> &tokens , const string &delims = \" \") {
          int pos = 0;
          int size;
          while (true) {
            pos = s.find_first_not_of(delims,pos);
            size = s.find_first_of(delims, pos) - pos;
            if (pos == -1) break;
            tokens.push_back(s.substr(pos,size));
            pos += size;
          }
        }
        """
'.source.makefile':
    'Makefile basic':
        'prefix': 'basic'
        'body': """
        CC=g++
        CFLAGS=-std=c++0x -O3
        OBJECTS=${2:sample}.o

        %.o : %.cpp
        \t$(CC) $(CFLAGS) -c $^

        ${1:main}: $(OBJECTS)
        \t$(CC) -o $@ $^

        clean:
        \trm -rf ${1:main} *.o
        """
'.source.perl':
    'Read File':
        'prefix': 'readfile'
        'body': """
        open ${1:INFILE}, \"<${2:$ARGV[0]}\" or die "Unable to open <${2:$ARGV[0]}: $!\\\\n";
        while (<${1:INFILE}>) {
        \t${3}
        }
        close (${1:INFILE});
        """
